{
  "openapi": "3.1.0",
  "info": {
    "title": "Concert-Tracker API",
    "description": "API for tracking concerts",
    "version": "0.0.1",
    "contact": {
      "name": "hildebrandp",
      "email": "foo@bar.com"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000/api",
      "description": "Local development server"
    }
  ],
  "paths": {
    "/concertVenues": {
      "get": {
        "summary": "Get all Concert-Venues",
        "description": "Fetch all Concert-Venues from the database.",
        "responses": {
          "200": {
            "description": "A list of all Concert-Venues",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "./schemas/ConcertVenue.json"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new Concert-Venue",
        "description": "Creates a new Concert-Venue in the database.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "./schemas/ConcertVenue.json"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "A list of all Concert-Venues",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConcertVenueCreated"
                }
              }
            }
          },
          "400": {
            "description": "Database error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/concertVenues/{id}": {
      "get": {
        "summary": "Get a Concert-Venue by ID",
        "description": "Fetch a single Concert-Venue by their ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the Concert-Venue"
          }
        ],
        "responses": {
          "200": {
            "description": "A single Concert-Venue",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./schemas/ConcertVenue.json"
                }
              }
            }
          },
          "404": {
            "description": "Concert-Venue not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a Concert-Venue by ID",
        "description": "Update a single Concert-Venue by their ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the Concert-Venue"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "./schemas/ConcertVenue.json"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A single Concert-Venue",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ok"
                }
              }
            }
          },
          "400": {
            "description": "Database error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Concert-Venue not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ConcertVenueCreated": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "A message"
          },
          "venueId": {
            "type": "string",
            "description": "The ID of the newly created Concert-Venue"
          }
        },
        "required": ["message", "venueId"]
      },
      "Ok": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "A message"
          }
        },
        "required": ["message"]
      },
      "Error": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "A message describing the error"
          }
        },
        "required": ["message"]
      }
    }
  }
}
